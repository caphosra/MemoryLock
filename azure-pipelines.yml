trigger:
- master
- refs/tags/v*
variables:
  dotnetCoreVersion: "2.2.401"
  projectDir: "./src/"
  testProjectDir: "./test/"

jobs:
- job: Test
  displayName: "xUnit Test"
  strategy:
    matrix:
      Windows:
        runningOS: "windows-latest"
        codeCoverage: False
      Ubuntu:
        runningOS: "ubuntu-latest"
        codeCoverage: True
      Mac:
        runningOS: macOS-latest
        codeCoverage: False
  pool:
    vmImage: $(runningOS)
  steps:
  - task: DotNetCoreInstaller@1
    displayName: "Install .NET Core"
    inputs:
      version: $(dotnetCoreVersion)
  - script: dotnet test --logger trx
    displayName: "Run xUnit test"
    workingDirectory: $(testProjectDir)
  - task: PublishTestResults@2
    displayName: "Publish test results"
    inputs:
      testResultsFormat: "VSTest"
      testResultsFiles: "**/*.trx"
    condition: succeededOrFailed()
  - script: dotnet test 
    displayName: "Calculate code coverage"
    workingDirectory: $(testProjectDir)
  - task: DotNetCoreCLI@1
    displayName: "Calculate code coverage"
    condition: and(succeeded(), eq(variables['codeCoverage'], 'true'))
    inputs:
      command: "test"
      arguments: "/p:CollectCoverage=true /p:CoverletOutput=./CodeCoverage/ /p:CoverletOutputFormat=cobertura"
  - task: PublishCodeCoverageResults@1
    displayName: "Publish code coverage"
    condition: and(succeeded(), eq(variables['codeCoverage'], 'true'))
    inputs:
      codeCoverageTool: "cobertura"
      summaryFileLocation: "$(testProjectDir)/CodeCoverage/coverage.cobertura.xml"
- job: Build
  displayName: "Build"
  pool:
    vmImage: "ubuntu-latest"
  steps:
  - task: DotNetCoreInstaller@1
    displayName: "Install .NET Core"
    inputs:
      version: $(dotnetCoreVersion)
  - script: dotnet publish -c Release
    displayName: "Run .NET Core publish"
    workingDirectory: $(projectDir)
  - task: CopyFiles@2
    displayName: "Copy artifacts"
    inputs:
      CleanTargetFolder: True
      flattenFolders: True
      Contents: "src/bin/Release/netcoreapp2.1/publish/*"
      TargetFolder: $(Build.ArtifactStagingDirectory)
  - task: PublishBuildArtifacts@1
    displayName: "Publish build artifacts"
    inputs:
      ArtifactName: "LibraryBuildOutput"
      PathtoPublish: $(Build.ArtifactStagingDirectory)
- job: Pack
  displayName: "Pack"
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  pool:
    vmImage: "ubuntu-latest"
  steps:
  - task: DotNetCoreInstaller@1
    displayName: "Install .NET Core"
    inputs:
      version: $(dotnetCoreVersion)
  - script: dotnet pack -c Release
    displayName: "Create Nuget package"
    workingDirectory: $(projectDir)
  - task: CopyFiles@2
    displayName: "Copy artifacts"
    inputs:
      CleanTargetFolder: True
      flattenFolders: True
      Contents: "**/*.nupkg"
      TargetFolder: $(Build.ArtifactStagingDirectory)
  - task: PublishBuildArtifacts@1
    displayName: "Publish build artifacts"
    inputs:
      ArtifactName: "PackageBuildOutput"
      PathtoPublish: $(Build.ArtifactStagingDirectory)

      